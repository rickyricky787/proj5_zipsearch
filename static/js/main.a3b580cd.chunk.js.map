{"version":3,"sources":["components/LogoBar.jsx","components/SearchBar.jsx","components/Results.jsx","App.js","serviceWorker.js","index.js"],"names":["LogoBar","style","backgroundColor","padding","margin","boxShadow","borderRadius","textAlign","React","Component","SearchBar","onChange","onSubmit","className","marginTop","paddingRight","placeholder","id","onKeyPress","event","key","onClick","e","Results","cities","map","city","width","marginLeft","marginRight","target","rel","href","Zipcode","class","LocationText","State","Country","Lat","Long","EstimatedPopulation","TotalWages","App","props","handleChange","setState","value","onSubmitZip","a","getZipSearch","state","zip","zipcode","axios","get","then","res","data","this","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uRAqBeA,E,uKART,OACE,yBAAKC,MAVQ,CAEbC,gBAAiB,0BACjBC,QAAS,OACTC,OAAQ,OACRC,UAAW,oCACXC,aAAc,OACdC,UAAW,WAIX,8C,GAbcC,IAAMC,WC2BbC,EA3BG,SAAC,GAA0B,IAAzBC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,SAC1B,OACI,yBAAKC,UAAU,aAAaZ,MAAO,CAAEa,UAAW,MAAOP,UAAW,WAChE,yBAAKN,MAAO,CAAEc,aAAc,QAC1B,2BAAOd,MAAO,CAAEc,aAAc,SAA9B,qBACA,2BACEC,YAAY,YACZL,SAAUA,EACVM,GAAG,MACHC,WAAY,SAAAC,GACQ,UAAdA,EAAMC,KACRR,EAASO,OAKjB,6BACA,4BACEN,UAAU,kBACVQ,QAAS,SAACC,GAAD,OAAOV,EAASU,KAF3B,mBCOKC,EAxBC,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACd,OAAOA,EACH,6BACKA,EAAOC,KAAI,SAACC,GAAD,OACR,yBAAKb,UAAU,wBAAwBZ,MAAO,CAAE0B,MAAO,QAASC,WAAY,OAAQC,YAAa,SAC7F,uBAAGC,OAAO,SAASC,IAAI,sBAAsBC,KAAM,qCAAuCN,EAAKO,QAASC,MAAM,eAAc,4BAAKR,EAAKS,eAClI,yBAAKtB,UAAU,aACX,uBAAGA,UAAU,aAAb,UAAiCa,EAAKU,OACtC,uBAAGvB,UAAU,aAAb,aAAoCa,EAAKW,SACzC,uBAAGxB,UAAU,aAAb,cAAqCa,EAAKY,IAA1C,KAAiDZ,EAAKa,KAAtD,KACA,uBAAG1B,UAAU,aAAb,eAAsCa,EAAKc,qBAC3C,uBAAG3B,UAAU,aAAb,gBAAuCa,EAAKe,kBAOhE,+B,iBCyCOC,E,kDAtDb,WAAYC,GAAQ,IAAD,8BACnB,cAAMA,IAeNC,aAAe,SAACtB,GACd,EAAKuB,SAAL,eACGvB,EAAEQ,OAAOb,GAAKK,EAAEQ,OAAOgB,SAlBT,EAsBnBC,YAtBmB,uCAsBL,WAAOzB,GAAP,SAAA0B,EAAA,+EACL,EAAKC,aAAa,EAAKC,MAAMC,MADxB,2CAtBK,wDA0BnBF,aAAe,SAACG,GACdC,IAAMC,IAAN,gDAAmDF,IAClDG,MAAK,SAACC,GACDA,EAAIC,MACN,EAAKZ,SAAS,CACZrB,OAAQgC,EAAIC,WA7BlB,EAAKP,MAAQ,CACXE,QAAS,KACT5B,OAAQ,MAJO,E,8KASbkC,KAAKR,MAAME,Q,yCAENM,KAAKT,aAAaS,KAAKR,MAAME,U,qIA0BtC,OACE,kBAAC,IAAMO,SAAP,KACE,kBAAC,EAAD,MAEA,kBAAC,EAAD,CACE/C,SAAU8C,KAAKX,YACfpC,SAAU+C,KAAKd,eAEjB,6BACA,kBAAC,EAAD,CACEpB,OAAQkC,KAAKR,MAAM1B,c,GAhDXf,a,MCMEmD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a3b580cd.chunk.js","sourcesContent":["import React from \"react\";\n\nclass LogoBar extends React.Component {\n    render() {\n      const header = {\n        \n        backgroundColor: \"rgba(255,255,255, 0.90)\",\n        padding: \"20px\",\n        margin: \"50px\",\n        boxShadow: \"0px 0px 20px 0px rgba(0,0,0,0.75)\",\n        borderRadius: \"10px\",\n        textAlign: \"center\"\n      };\n      return (\n        <div style={header}>\n        <h1>ZipSearch</h1>\n        </div>\n      );\n    }\n  }\n\nexport default LogoBar;","import React from \"react\";\n\nconst SearchBar = ({onChange, onSubmit}) => {\n    return (\n        <div className=\"input-form\" style={{ marginTop: \"1vh\", textAlign: \"center\" }}>\n          <div style={{ paddingRight: \"1px\" }}>\n            <label style={{ paddingRight: \"10px\" }}>Enter a zipcode: </label>\n            <input\n              placeholder=\"Try 10065\"\n              onChange={onChange}\n              id=\"zip\"\n              onKeyPress={event => {\n                if (event.key === 'Enter') {\n                  onSubmit(event)\n                }\n              }}\n            />\n          </div>\n          <br></br>\n          <button\n            className=\"btn btn-primary\"\n            onClick={(e) => onSubmit(e)}\n          >\n            Search by zip\n          </button>\n        </div>\n      );\n    };\n\nexport default SearchBar;","import React from \"react\";\n\nconst Results = ({cities}) => {\n    return cities ? (\n        <div>\n            {cities.map((city) => (\n                <div className=\"card border-dark mb-3\" style={{ width: \"18rem\", marginLeft: \"auto\", marginRight: \"auto\"}}>\n                    <a target=\"_blank\" rel=\"noopener noreferrer\" href={'https://www.google.com/maps/place/' + city.Zipcode} class=\"card-header\"><h5>{city.LocationText}</h5></a>\n                        <div className=\"card-body\">\n                            <p className=\"card-text\">State: {city.State}</p>\n                            <p className=\"card-text\"> Country: {city.Country}</p>\n                            <p className=\"card-text\">Location: ({city.Lat}, {city.Long})</p>\n                            <p className=\"card-text\">Population: {city.EstimatedPopulation}</p>\n                            <p className=\"card-text\">Total Wages: {city.TotalWages}</p>\n                        </div>\n                </div>\n            ))}\n        </div>\n        \n    ) : (\n        <div>\n        </div>\n        );\n    \n};\n\nexport default Results;","import React, { Component } from \"react\";\nimport LogoBar from \"./components/LogoBar\";\nimport SearchBar from \"./components/SearchBar\";\nimport Results from \"./components/Results\";\nimport axios from \"axios\";\n\nclass App extends Component {\n  constructor(props) {\n  super(props);\n    this.state = {\n      zipcode: null,\n      cities: null,\n    };\n  }\n\n  async componentDidMount() {\n    if (this.state.zipcode)\n    {\n      return this.getZipSearch(this.state.zipcode);\n    }\n  }\n\n  \n  handleChange = (e) => {\n    this.setState({\n      [e.target.id]: e.target.value,\n    });\n  };\n\n  onSubmitZip = async (e) => {\n    return this.getZipSearch(this.state.zip);\n  }\n\n  getZipSearch = (zipcode) => {\n    axios.get(`https://ctp-zip-api.herokuapp.com/zip/${zipcode}`)\n    .then((res) => {\n      if (res.data)\n        this.setState({\n          cities: res.data,\n        });\n    })\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <LogoBar\n        />\n        <SearchBar\n          onSubmit={this.onSubmitZip}\n          onChange={this.handleChange}\n        />\n        <br></br>\n        <Results\n          cities={this.state.cities}\n        />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}